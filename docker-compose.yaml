services:
  postgres:
    image: postgres:17.5-alpine3.22
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-production_db}
      POSTGRES_USER: ${POSTGRES_USER:-dbuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Please set POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      # Bind to internal network interface only (Hetzner private network called Postgres)
      - "${SERVER_PRIVATE_IP:-10.0.0.2}:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./backup_temp:/tmp/backups
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    networks:
      - postgres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dbuser} -d ${POSTGRES_DB:-production_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # PostgreSQL monitoring - Hetzner internal network only called Postgres
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-dbuser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-production_db}?sslmode=disable"
    ports:
      # Bind to internal network interface only (Hetzner private network called Postgres)
      - "${SERVER_PRIVATE_IP:-10.0.0.2}:9187:9187"
    networks:
      - postgres_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - monitoring

  # pgAdmin - Publicly accessible for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-prod
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:?Please set PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'True'
      PGADMIN_LISTEN_ADDRESS: '0.0.0.0'
      PGADMIN_LISTEN_PORT: 80
    ports:
      # Bind to all interfaces for external access
      - "0.0.0.0:${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin-servers.json:/pgladmin4/servers.json:ro
    networks:
      - postgres_network
    depends_on:
      postgres:
        condition: service_healthy

  # Backup service with S3 integration
  backup-service:
    image: postgres:17.5-alpine3.22
    container_name: postgres-backup
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-production_db}
      POSTGRES_USER: ${POSTGRES_USER:-dbuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_ACCESS_KEY_ID: ${HETZNER_S3_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${HETZNER_S3_SECRET_KEY}
      AWS_DEFAULT_REGION: ${HETZNER_S3_REGION:-eu-central}
      S3_ENDPOINT: ${HETZNER_S3_ENDPOINT:-https://fsn1.your-objectstorage.com}
      S3_BUCKET: ${HETZNER_S3_BUCKET:-postgres-backups}
    volumes:
      - ./backup_temp:/tmp/backups
      - ./backup-scripts:/backup-scripts:ro
    networks:
      - postgres_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup
    entrypoint: /backup-scripts/backup-to-s3.sh

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/HC_Volume_102724466/pgdata
  backup_temp:
    driver: local
  pgadmin_data:
    driver: local

networks:
  postgres_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
