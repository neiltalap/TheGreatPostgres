# Postgres
# Note: Image requires a password at init, but client auth uses mTLS only.
POSTGRES_USER=dbuser
POSTGRES_PASSWORD=please-change-not-used-for-auth


# Backups (S3-compatible)
# Works with AWS S3, Hetzner, MinIO, Cloudflare R2, etc.
HETZNER_S3_ACCESS_KEY=
HETZNER_S3_SECRET_KEY=
HETZNER_S3_BUCKET=postgres-backups
HETZNER_S3_REGION=eu-central
# Leave empty for AWS; set full URL for non-AWS providers (e.g., https://fsn1.your-s3.com)
HETZNER_S3_ENDPOINT=

# Backup scheduler (cron)
SCHEDULE="0 2 * * *"        # daily 02:00 UTC
BACKUP_RETENTION_DAYS=30     # days to keep daily backups
WEEKLY_BACKUP=yes
MONTHLY_BACKUP=yes

# Backup scope: 'database' (single DB named by POSTGRES_DATABASE) or 'cluster'
# to back up ALL databases and global roles. Cluster backups require a superuser.
# BACKUP_SCOPE=cluster

# mTLS is configured via mounted certs, not env
# - Server: certs/server.crt, certs/server.key, certs/ca.crt
# - Clients: client-certs/client.crt, client-certs/client.key, and ca.crt
# Generate with: scripts/generate-certs.sh --cn db.ozinozi.com --client dbuser

# Optional: for internal services (backup/restore/exporter), you can relax hostname
# verification by setting PGSSLMODE=verify-ca if your server cert SANs do not include
# 'DNS:postgres'. The generator script adds DNS:postgres automatically; leave unset
# to keep strict verify-full.
# PGSSLMODE=verify-ca
