#!/usr/bin/env bash
set -euo pipefail

echo "[render-config] Starting dynamic PostgreSQL config generation" >&2

# Helpers
bytes_to_mb() {
  awk 'BEGIN { printf "%d", ARGV[1] / (1024*1024) }' "$1"
}

percent_of() {
  # percent_of PERCENT TOTAL_MB
  awk 'BEGIN { printf "%d", (ARGV[1] * ARGV[2]) / 100 }' "$1" "$2"
}

get_mem_limit_mb() {
  # cgroup v2
  if [[ -f /sys/fs/cgroup/memory.max ]]; then
    local v
    v=$(cat /sys/fs/cgroup/memory.max)
    if [[ "$v" != "max" ]]; then echo $(bytes_to_mb "$v"); return; fi
  fi
  # cgroup v1
  if [[ -f /sys/fs/cgroup/memory/memory.limit_in_bytes ]]; then
    local v
    v=$(cat /sys/fs/cgroup/memory/memory.limit_in_bytes)
    if [[ "$v" =~ ^[0-9]+$ ]] && (( v > 0 )); then echo $(bytes_to_mb "$v"); return; fi
  fi
  # Fallback to env or default 8GB
  echo "${PG_MEMORY_MB:-8192}"
}

get_cpu_cores() {
  # cgroup v2 cpu.max: "quota period" or "max period"
  if [[ -f /sys/fs/cgroup/cpu.max ]]; then
    read -r quota period < /sys/fs/cgroup/cpu.max || true
    if [[ "${quota:-max}" != "max" ]] && [[ -n "${period:-}" ]] && [[ "$period" -gt 0 ]]; then
      awk 'BEGIN { printf "%d", (ARGV[1] / ARGV[2]) + 0.5 }' "$quota" "$period"
      return
    fi
  fi
  nproc
}

mkconf_dir() {
  mkdir -p /etc/postgresql
}

render_postgresql_conf() {
  local total_mb="$1" cores="$2"

  # Allow env overrides (support both PG_* and POSTGRES_* prefixes)
  local max_connections="${PG_MAX_CONNECTIONS:-${POSTGRES_MAX_CONNECTIONS:-400}}"

  # Compute memory settings
  local shared_buffers_mb="${PG_SHARED_BUFFERS_MB:-$(percent_of 25 "$total_mb")}"
  local effective_cache_mb="${PG_EFFECTIVE_CACHE_MB:-$(percent_of 75 "$total_mb")}"

  # maintenance_work_mem: min(1024MB, 6% RAM) unless overridden
  local mwm_default
  mwm_default=$(percent_of 6 "$total_mb")
  if (( mwm_default > 1024 )); then mwm_default=1024; fi
  local maintenance_work_mem_mb="${PG_MAINTENANCE_WORK_MEM_MB:-$mwm_default}"

  # work_mem: (RAM - shared_buffers) / (2 * max_connections)
  local available_mb=$(( total_mb - shared_buffers_mb ))
  if (( available_mb < 256 )); then available_mb=256; fi
  local divisor=$(( 2 * max_connections ))
  if (( divisor < 1 )); then divisor=1; fi
  local work_mem_mb=$(( available_mb / divisor ))
  if (( work_mem_mb < 4 )); then work_mem_mb=4; fi
  if [[ -n "${PG_WORK_MEM_MB:-}" ]]; then work_mem_mb="$PG_WORK_MEM_MB"; fi

  # Resolve final config values, allowing literal overrides with units
  local shared_buffers_conf effective_cache_conf work_mem_conf maintenance_work_mem_conf
  if [[ -n "${POSTGRES_SHARED_BUFFERS:-}" ]]; then
    shared_buffers_conf="$POSTGRES_SHARED_BUFFERS"
  else
    shared_buffers_conf="${shared_buffers_mb}MB"
  fi
  if [[ -n "${POSTGRES_EFFECTIVE_CACHE_SIZE:-}" ]]; then
    effective_cache_conf="$POSTGRES_EFFECTIVE_CACHE_SIZE"
  else
    effective_cache_conf="${effective_cache_mb}MB"
  fi
  if [[ -n "${POSTGRES_WORK_MEM:-}" ]]; then
    work_mem_conf="$POSTGRES_WORK_MEM"
  else
    work_mem_conf="${work_mem_mb}MB"
  fi
  if [[ -n "${POSTGRES_MAINTENANCE_WORK_MEM:-}" ]]; then
    maintenance_work_mem_conf="$POSTGRES_MAINTENANCE_WORK_MEM"
  else
    maintenance_work_mem_conf="${maintenance_work_mem_mb}MB"
  fi

  # Parallelism based on cores
  local max_worker_processes="${PG_MAX_WORKER_PROCESSES:-$cores}"
  local max_parallel_workers="${PG_MAX_PARALLEL_WORKERS:-$cores}"
  local max_parallel_workers_per_gather="${PG_MAX_PARALLEL_PER_GATHER:-$(( cores>1 ? cores/2 : 1 ))}"
  local max_parallel_maintenance_workers="${PG_MAX_PARALLEL_MAINT_WORKERS:-$(( cores>1 ? cores/2 : 1 ))}"

  local ssl="${PG_SSL:-${POSTGRES_SSL:-off}}"
  local password_encryption="${PG_PASSWORD_ENCRYPTION:-${POSTGRES_PASSWORD_ENCRYPTION:-scram-sha-256}}"

  # Determine shared_preload_libraries
  local preload_default="pg_stat_statements"
  # Append timescaledb if library exists
  if ls /usr/lib/postgresql/*/lib/timescaledb*.so >/dev/null 2>&1; then
    preload_default=",$preload_default,timescaledb"; preload_default=${preload_default#,}
  fi
  local shared_preload_libraries_val="${PG_SHARED_PRELOAD_LIBRARIES:-$preload_default}"

  cat > /etc/postgresql/postgresql.conf <<EOF
# Auto-generated by render-config.sh
listen_addresses = '*'
port = 5432
max_connections = ${max_connections}
superuser_reserved_connections = 3

# Memory
shared_buffers = ${shared_buffers_conf}
effective_cache_size = ${effective_cache_conf}
work_mem = ${work_mem_conf}
maintenance_work_mem = ${maintenance_work_mem_conf}
dynamic_shared_memory_type = posix

# WAL
wal_level = replica
max_wal_size = ${PG_MAX_WAL_SIZE:-2GB}
min_wal_size = ${PG_MIN_WAL_SIZE:-256MB}
checkpoint_completion_target = ${PG_CHECKPOINT_COMPLETION_TARGET:-0.9}
wal_buffers = ${PG_WAL_BUFFERS:-16MB}

# Query Planner / Parallel
random_page_cost = ${PG_RANDOM_PAGE_COST:-1.1}
effective_io_concurrency = ${PG_EFFECTIVE_IO_CONCURRENCY:-200}
max_worker_processes = ${max_worker_processes}
max_parallel_workers = ${max_parallel_workers}
max_parallel_workers_per_gather = ${max_parallel_workers_per_gather}
max_parallel_maintenance_workers = ${max_parallel_maintenance_workers}

# Logging
log_destination = 'stderr'
logging_collector = on
log_directory = 'log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_rotation_age = 1d
log_rotation_size = 100MB
log_truncate_on_rotation = on
log_line_prefix = '%t [%p-%l] %q%u@%d '
log_min_duration_statement = ${PG_LOG_MIN_DURATION_MS:-1000}
log_checkpoints = on
log_connections = on
log_disconnections = on
log_lock_waits = on
log_statement = '${PG_LOG_STATEMENT:-ddl}'

# Statistics / extensions
shared_preload_libraries = '${shared_preload_libraries_val}'
track_activities = on
track_counts = on
track_io_timing = on
track_functions = all
track_wal_io_timing = on

# Security
ssl = ${ssl}
password_encryption = ${password_encryption}

# Locale
lc_messages = 'en_US.utf8'
lc_monetary = 'en_US.utf8'
lc_numeric = 'en_US.utf8'
lc_time = 'en_US.utf8'
default_text_search_config = 'pg_catalog.english'

# Timezone
timezone = '${PG_TIMEZONE:-UTC}'

# pg_stat_statements
pg_stat_statements.max = ${PG_STAT_STATEMENTS_MAX:-10000}
pg_stat_statements.track = ${PG_STAT_STATEMENTS_TRACK:-all}
EOF
}

render_pg_hba_conf() {
  local method="${PG_HBA_METHOD:-scram-sha-256}"
  local docker_subnet="${POSTGRES_NETWORK_SUBNET:-172.20.0.0/16}"
  local include_default_docker="${INCLUDE_DEFAULT_DOCKER_SUBNET:-true}"
  local default_docker_subnet="${DEFAULT_DOCKER_SUBNET:-172.17.0.0/16}"
  local extra_cidrs="${PG_HBA_HOST_CIDRS:-}"

  cat > /etc/postgresql/pg_hba.conf <<EOF
# Auto-generated by render-config.sh
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# Local socket
local   all             all                                     ${method}

# Loopback
host    all             all             127.0.0.1/32            ${method}
host    all             all             ::1/128                 ${method}

# Docker compose network
host    all             all             ${docker_subnet}         ${method}
EOF

  if [[ "${include_default_docker}" == "true" ]]; then
    echo "host    all             all             ${default_docker_subnet}         ${method}" >> /etc/postgresql/pg_hba.conf
  fi

  # Extra CIDRs (comma or space separated)
  if [[ -n "${extra_cidrs}" ]]; then
    # Normalize separators to spaces
    extra_cidrs="${extra_cidrs//,/ }"
    for cidr in $extra_cidrs; do
      [[ -z "$cidr" ]] && continue
      printf "host    all             all             %s            %s\n" "$cidr" "$method" >> /etc/postgresql/pg_hba.conf
    done
  fi

  cat >> /etc/postgresql/pg_hba.conf <<EOF

# Replication (restrict to internal networks)
host    replication     all             127.0.0.1/32            ${method}
host    replication     all             ::1/128                 ${method}
host    replication     all             ${docker_subnet}         ${method}

# Deny all other connections explicitly
host    all             all             0.0.0.0/0               reject
host    all             all             ::/0                    reject
EOF
}

main() {
  mkconf_dir
  local mem_mb cores
  mem_mb=$(get_mem_limit_mb)
  cores=$(get_cpu_cores)

  echo "[render-config] Detected memory: ${mem_mb}MB, CPU cores: ${cores}" >&2

  render_postgresql_conf "$mem_mb" "$cores"
  render_pg_hba_conf

  echo "[render-config] Generated /etc/postgresql/postgresql.conf and pg_hba.conf" >&2

  exec postgres \
    -c config_file=/etc/postgresql/postgresql.conf \
    -c hba_file=/etc/postgresql/pg_hba.conf
}

main "$@"
